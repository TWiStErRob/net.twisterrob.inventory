// Substitutions for project
configurations.all { Configuration config ->
	config.resolutionStrategy.dependencySubstitution.all { DependencySubstitution dependency ->
		if (dependency.requested instanceof ModuleComponentSelector
				&& dependency.requested.group == "net.twisterrob.lib") {
			def module = dependency.requested.module.toString()
			if (module == "twister-libs-android") {
				dependency.useTarget(rootProject)
				return
			}
			if (!module.startsWith("twister-lib-android-")) {
				return
			}
			module = module.substring("twister-lib-android-".length())
			def subproject = findProject(":${module}")
			if (subproject != null) {
				dependency.useTarget(subproject)
			}
		}
	}
}

// Substitutions for support library
configurations.all { Configuration config ->
	if (!config.name.contains("lintClassPath")) {
		config.resolutionStrategy { ResolutionStrategy strategy ->
			strategy.dependencySubstitution { subst ->
				[ "support-annotations", "support-v4", "appcompat-v7", "support-v13",
				  "design", "customtabs", "preference-v7", "preference-v14",
				  "recyclerview-v7", "cardview-v7", "gridlayout-v7", "percent", "palette-v7",
				  "mediarouter-v7", "leanback-v17", "preference-leanback-v17", "recommendation",
				  "support-vector-drawable", "animated-vector-drawable"
				].each {
					strategy.force("com.android.support:${it}:${VERSION_SUPPORT}")
					subst.substitute(module("com.android.support:${it}"))
					     .with module("com.android.support:${it}:${VERSION_SUPPORT}")
				}
			}
		}
	}
}

// Substitutions for Mockito on Android
configurations.all { Configuration config ->
	if (!config.name.contains("AndroidTest")) return
	config.resolutionStrategy { ResolutionStrategy strategy ->
		// otherwise RuntimeException at ClassVisitor.visitModule
		force("net.bytebuddy:byte-buddy:1.8.22")
		// otherwise RuntimeException at ClassVisitor.visitModule
		force("net.bytebuddy:byte-buddy-agent:1.8.22")
		strategy.dependencySubstitution {
			all { DependencySubstitution dep ->
				if (dep.requested instanceof ModuleComponentSelector
						&& dep.requested.module == "guava"
						&& dep.requested.group == "com.google.guava") {
					// need to use the Android dependency, otherwise Dex/R8/Jetifier fails
					def androidVersion = dep.requested.version.replace("-jre", "-android")
					dep.useTarget("com.google.guava:guava:${androidVersion}")
				}
				if (dep.requested instanceof ModuleComponentSelector
						&& dep.requested.module == "mockito-core"
						&& dep.requested.group == "org.mockito") {
					// need to use the Android dependency, otherwise Dex/R8/Jetifier fails
					// com.android.builder.dexing.DexArchiveBuilderException:
					//     Failed to process gradle\caches\modules-2\files-2.1\org.objenesis\objenesis\3.0.1\11cfac598df9dc48bb9ed9357ed04212694b7808\objenesis-3.0.1.jar
					//     Caused by: com.android.builder.dexing.DexArchiveBuilderException: Error while dexing.
					//     Caused by: com.android.tools.r8.CompilationFailedException: Compilation failed to complete
					//     Caused by: com.android.tools.r8.utils.AbortException: Error:
					//     MethodHandle.invoke and MethodHandle.invokeExact are only supported starting with Android O (--min-api 26)
					// need to use the Android dependency, otherwise wouldn't work at runtime
					dep.useTarget("org.mockito:mockito-android:${dep.requested.version}")
				}
			}
		}
	}
}

// Substitutions for Hamcrest
configurations.all { Configuration config ->
	config.resolutionStrategy { ResolutionStrategy strategy ->
		strategy.dependencySubstitution {
			substitute(module("org.hamcrest:hamcrest-core"))
					.with module("org.hamcrest:java-hamcrest:${VERSION_HAMCREST}")
			substitute(module("org.hamcrest:hamcrest-library"))
					.with module("org.hamcrest:java-hamcrest:${VERSION_HAMCREST}")
		}
	}
}

// Resolve dependency conflicts
configurations.all { Configuration config ->
	config.resolutionStrategy {
		// 1.0.2 (AGP) vs 1.0.3 (latest)
		force("com.android.support:multidex:${VERSION_MULTIDEX}")
		// 1.0.2 (AGP) vs 1.0.3 (latest)
		force("com.android.support:multidex-instrumentation:${VERSION_MULTIDEX}")
		// use latest version, hamcrest-junit refers to 4.12
		force("junit:junit:${VERSION_JUNIT}")
		// powermock refers to older
		force("org.mockito:mockito-core:${VERSION_MOCKITO}")
		// 3.0.1 (powermock 2.0.4) vs 2.6 (mockito 3.2.4)
		force("org.objenesis:objenesis:3.0.1")
		// 1.10.5 (powermock 2.0.4) vs 1.9.10 (mockito 3.2.4)
		force("net.bytebuddy:byte-buddy:1.10.5")
		// 1.10.5 (powermock 2.0.4) vs 1.9.10 (mockito 3.2.4)
		force("net.bytebuddy:byte-buddy-agent:1.10.5")
		// 17.0 (shazamcrest 0.11, bumped in next release) vs 27.0.1-jre (robolectric 4.3.1)
		force("com.google.guava:guava:27.0.1-jre")
		// Robolectric has inconsistent internal dependencies (4.3.1): 1.0.4, 1.4.2, 1.5.15
		force("org.codehaus.plexus:plexus-utils:1.5.15")
		// 1.0.1 (Espresso 3.0.1) vs 1.0.2 (Robolectric needs it)
		force("com.android.support.test:runner:${VERSION_ESPRESSO_RUNNER}")
		// 1.0.1 (Espresso 3.0.1) vs 1.0.2 (Robolectric needs it)
		force("com.android.support.test:rules:${VERSION_ESPRESSO_RUNNER}")
		// 2.0.1 (Espresso 3.0.1) vs 3.0.2 (latest)
		force("com.google.code.findbugs:jsr305:3.0.2")
	}
}
