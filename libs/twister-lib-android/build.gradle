apply plugin: 'android-library' // http://tools.android.com/tech-docs/new-build-system/user-guide
apply plugin: 'android-maven'
apply plugin: 'eclipse'

group projectGroup
version projectVersion

buildscript {
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath 'com.android.tools.build:gradle:0.12.1' // apply plugin: android
		classpath 'com.github.dcendents:android-maven-plugin:1.1' // for gradle install (to put aar into the repo)
	}
}

repositories {
	mavenCentral()
	mavenLocal()
}

configurations {
	provided
	eclipseProjects
}


sourceSets {
	main {
		compileClasspath += configurations.provided
	}
}

dependencies {
	compile 'net.twisterrob:twister-lib-java:1.0'

	compile fileTree(dir: 'libs', include: '*.jar')

	provided 'com.android.support:support-v4:19.1.0'
	provided 'com.android.support:support-v13:19.1.0'
	provided 'com.android.support:appcompat-v7:19.1.0'
	provided 'com.google.android.gms:play-services:5.0.77'
	eclipseProjects 'net.twisterrob:twister-lib-java:1.0'
	eclipseProjects 'com.android.support:appcompat-v7:19.1.0'
	eclipseProjects('com.google.android.gms:play-services:5.0.77') {
		exclude module:'support-v13'
		exclude module:'support-v4'
	}
}

android {
	compileSdkVersion "Google Inc.:Google APIs:19"
	buildToolsVersion "19.1"

	compileOptions {
		sourceCompatibility = JavaVersion.VERSION_1_6
		targetCompatibility = JavaVersion.VERSION_1_6
	}

	sourceSets {
		main {
			manifest.srcFile 'AndroidManifest.xml'
			res.srcDirs = ['res']
            assets.srcDirs = ['assets']
		}
	}

	lintOptions {
		abortOnError false
	}
}

if (plugins.hasPlugin('android') || plugins.hasPlugin('android-library')) {
	// sets up the Android Eclipse project, using the old Ant based build.
	eclipse {
		sourceSets {
			main {
				java.srcDirs 'src/main/java', 'src/main/resources', 'gen'
			}
		}

		jdt {
			sourceCompatibility = 1.6
			targetCompatibility = 1.6
		}

		project {
			referencedProjects 'twister-lib-java'
			referencedProjects 'android-support-v7-appcompat'
			natures 'com.android.ide.eclipse.adt.AndroidNature'
			buildCommands.clear();
			buildCommand "com.android.ide.eclipse.adt.ResourceManagerBuilder"
			buildCommand "com.android.ide.eclipse.adt.PreCompilerBuilder"
			buildCommand "org.eclipse.jdt.core.javabuilder"
			buildCommand "com.android.ide.eclipse.adt.ApkBuilder"
		}

		classpath {
			def c = project.configurations
			plusConfigurations += [c.compile, c.provided]
			minusConfigurations += [c.eclipseProjects]
			noExportConfigurations += [c.provided, c.eclipseProjects]
			containers 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK', 'com.android.ide.eclipse.adt.LIBRARIES', 'com.android.ide.eclipse.adt.DEPENDENCIES'
			file {
				// TODO move to whenMerged
				withXml { xmlProvider ->
					def classpath = xmlProvider.asNode()
					classpath.appendNode "classpathentry", ["combineaccessrules": "false", "kind": "src", "path": "/twister-lib-java", "exported": "true" ]

					// <attributes><attribute name="ignore_optional_problems" value="true"/></attributes>
					classpath.grep { it.'@path' == "gen" }.each {
						def attr = it.appendNode "attributes"
						attr.appendNode "attribute", ["name": "ignore_optional_problems", "value": "true"]
					}
				}
			}
		}


		def projectPropertiesFile = file("project.properties")
		projectPropertiesFile.delete()
		def projectTarget = android.compileSdkVersion
		if (projectTarget ==~ /\d+/) { projectTarget = 'android-' + projectTarget }
		projectPropertiesFile.append 'target=' + projectTarget + '\n'

		if (plugins.hasPlugin('android-library')) {
			projectPropertiesFile.append 'android.library=true\n'
		}

		// Import existing Android code into workspace: android-sdk/extras/google/google_play_services/libproject/google-play-services_lib
		projectPropertiesFile.append 'android.library.reference.1=../google-play-services_lib\n'
		projectPropertiesFile.append 'android.library.reference.2=../android-support-v7-appcompat\n'
	}
}

task deps << {
	[configurations.default, configurations.compile, configurations.runtime, configurations.provided, configurations.eclipseProjects].each { c ->
		println 'Configuration: ' + c.name
		println '\tdirect deps artifacts:'
	    c.resolvedConfiguration.firstLevelModuleDependencies.moduleArtifacts.each {
	         println '\t\t' + it.file
	    }
	    println '\tall deps artifacts:'
	    c.resolvedConfiguration.firstLevelModuleDependencies.allModuleArtifacts.each {
	         println '\t\t' + it.file
	    }
	}
    
}
