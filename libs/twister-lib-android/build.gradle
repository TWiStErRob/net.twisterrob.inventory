buildscript {
	repositories {
		jcenter()
		google()
		maven { name = "twisterrob"; url = "http://localhost/maven" }
		maven { name = "Gradle libs (for Kotlin-DSL)"; url = "https://repo.gradle.org/gradle/libs-releases-local/" }
	}
	dependencies {
		//configurations.classpath.resolutionStrategy.cacheChangingModulesFor 0, 'seconds' // -SNAPSHOT
		classpath "net.twisterrob.gradle:plugin:${VERSION_TWISTER_GRADLE}"
	}
}

group = 'net.twisterrob.lib'
version = '1.0'

apply plugin: 'net.twisterrob.android-library'
apply from: 'http://localhost/maven/configure.gradle'

dependencies {
	//configurations.implementation.resolutionStrategy.cacheChangingModulesFor 0, 'seconds' // -SNAPSHOT
	implementation 'net.twisterrob.lib:twister-libs-java'
	implementation 'net.twisterrob.lib:twister-lib-android-defs'
	implementation 'net.twisterrob.lib:twister-lib-android-logging'
	implementation 'net.twisterrob.lib:twister-lib-android-basics'
	implementation 'net.twisterrob.lib:twister-lib-android-stringers'
	implementation "com.android.support:support-v4:${VERSION_SUPPORT}"
	implementation "com.android.support:appcompat-v7:${VERSION_SUPPORT}"
	implementation "com.android.support:cardview-v7:${VERSION_SUPPORT}"
	implementation "com.android.support:recyclerview-v7:${VERSION_SUPPORT}"
	implementation "com.android.support:design:${VERSION_SUPPORT}"
	//implementation "com.android.support:palette-v7:${VERSION_SUPPORT}"

	// FIXME @Deprecated, use Glide
	implementation 'com.jakewharton:disklrucache:2.0.2'

	// 2.4.+ is required for API 28+
	// because of HueSatView and SliderViewBase using removed Canvas.save(int) in earlier versions
	implementation 'com.rarepebble:colorpicker:2.4.2'

	apply from: "${rootDir}/gradle/testCompile.gradle", to: project
}

android {
	compileSdkVersion = 28
	defaultConfig {
		minSdkVersion 10
		multiDexEnabled = true
		dependencies {
			implementation "com.android.support:multidex:${VERSION_MULTIDEX}"
		}
	}
	lintOptions {
		checkAllWarnings = true
		checkDependencies = true
	}
	testOptions {
		unitTests.returnDefaultValues = true
	}
}
subprojects {
	afterEvaluate {
		def android = project.extensions.findByName("android")
		if (android != null) {
			android.compileSdkVersion = 28
		}
	}
}
allprojects { Project project ->
	project.repositories {
		jcenter()
	}
	configurations.all {
		if (it.name == 'lintClassPath') return
		it.resolutionStrategy.failOnVersionConflict()
	}
	apply from: rootProject.file("gradle/substitutions.gradle")

	project.afterEvaluate {
		project.android.lintOptions.lintConfig = rootProject.file("config/lint/lint.xml")
		project.android.lintOptions.baseline rootProject.file("config/lint/lint-baseline-${project.name}.xml")

		com.android.build.gradle.api.AndroidSourceSet androidTest = project.android.sourceSets.androidTest
		if (androidTest.java.sourceFiles.empty) {
			logger.info "Disabling AndroidTest tasks in ${project.path} as it has no sources in ${androidTest.java.srcDirs}"
			project.tasks.whenTaskAdded { task ->
				if (task.name.contains("AndroidTest")) {
					task.enabled = false
				}
			}
		}
	}
}

tasks.register("cleanFull") {
	// allprojects*.tasks*.named("clean") is not available at this point
	dependsOn allprojects.collect { "${it.path}:clean" }
}

tasks.named("connectedCheck").configure {
	dependsOn(subprojects.collect { "${it.path}:connectedCheck" })
}

evaluationDependsOnChildren() // TODO somehow remove this
allprojects \
	.collectMany { it.tasks.withType(com.android.build.gradle.internal.tasks.DeviceProviderInstrumentTestTask) } \
	.inject { prev, curr -> curr.configure { it.mustRunAfter prev }; return prev }
