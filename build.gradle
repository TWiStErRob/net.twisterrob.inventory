buildscript {
	repositories {
		jcenter()
		maven { name 'twisterrob'; url 'http://localhost/maven' }
	}

	dependencies {
		configurations.classpath.resolutionStrategy.cacheChangingModulesFor 0, 'seconds' // -SNAPSHOT
		classpath "net.twisterrob.gradle:plugin:${VERSION_TWISTER_GRADLE}"
	}
}

apply plugin: 'net.twisterrob.root'

allprojects {
	repositories {
		jcenter()
		maven { name 'twisterrob'; url 'http://localhost/maven' }
		maven { name 'sonatype'; url 'http://oss.sonatype.org/content/repositories/snapshots' }
		//maven { name 'idescout'; url 'http://www.idescout.com/maven/repo/' }
	}

	configurations.all({ it.resolutionStrategy.failOnVersionConflict() })
}

// run `gradlew releaseCheck -x clean -x check -x connectedCheck` to just get the output of this
task releaseCheck() {
	dependsOn getTasksByName('clean', true)
	dependsOn getTasksByName('check', true)
	dependsOn ':android:connectedCheck'
	doLast {
		def report = { task, type, loc ->
			if (file(loc).exists()) {
				println "${task.path} ${type}: ${loc}"
			}
		}
		println "================ Report Locations ================"
		getTasksByName('lint', true).each {
			new LintHelper(it).print(report)
		}
		getAllTasks(true)
				.collectMany { it.value }
				.findAll { it instanceof Test }
				.each { Test task -> report(task, 'test', task.reports.html.entryPoint) }
	}
}
import com.android.build.gradle.internal.dsl.LintOptions
import com.android.build.gradle.tasks.Lint

class LintHelper {
	Lint task
	LintHelper(Task task) {
		this.task = (Lint)task
	}
	private static lintField(Object task, String name) {
		def field = Lint.class.getDeclaredField(name)
		field.accessible = true
		return field.get(task)
	}
	def output(ext) {
		def fatal = lintField(task, 'mFatalOnly') as boolean
		File out
		out = LintOptions.createOutputPath(task.project, 'release', ".${ext}", fatal)
		if (out.exists()) {
			return out
		}
		out = LintOptions.createOutputPath(task.project, 'debug', ".${ext}", fatal)
		if (out.exists()) {
			return out
		}
		return LintOptions.createOutputPath(task.project, task.variantName, ".${ext}", fatal)
	}
	def print(reporter) {
		def lint = lintField(task, 'mLintOptions') as com.android.builder.model.LintOptions
		if (lint.textReport) {
			reporter(task, 'text', lint.textOutput ?: output('txt'))
		}
		if (lint.htmlReport) {
			reporter(task, 'html', lint.htmlOutput ?: output('html'))
		}
		if (lint.xmlReport) {
			reporter(task, 'xml', lint.xmlOutput ?: output('xml'))
		}
	}
}
