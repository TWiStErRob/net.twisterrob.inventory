apply plugin: 'android' // http://tools.android.com/tech-docs/new-build-system/user-guide
apply plugin: 'eclipse'

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'com.android.tools.build:gradle:0.12.+'
	}
}

repositories {
	mavenCentral()
	mavenLocal()
}

configurations {
	provided
	eclipseProjects
}

dependencies {
	compile fileTree(dir: 'libs', include: ['*.jar'])
	compile 'net.twisterrob:twister-lib-android:1.0'
	compile 'com.caverock:androidsvg:1.2.1'
	compile 'org.apache.commons:commons-csv:1.0'
	compile 'com.android.support:support-v4:19.1.0'
	compile 'com.android.support:support-v13:19.1.0'
	compile 'com.android.support:appcompat-v7:19.1.0'
	compile 'com.github.bumptech.glide:glide:3.3.+'
	eclipseProjects 'net.twisterrob:twister-lib-android:1.0'
	eclipseProjects 'com.android.support:appcompat-v7:19.1.0'
}

android {
	compileSdkVersion 19
	buildToolsVersion "19.1.0"

	sourceSets {
		main {
			manifest.srcFile 'AndroidManifest.xml'
			res.srcDirs = ['res']
			assets.srcDirs = ['assets']
		}
	}

//	buildTypes {
//		release {
//			runProguard true
//			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
//		}
//	}
}


if (plugins.hasPlugin('android') || plugins.hasPlugin('android-library')) {
	// sets up the Android Eclipse project, using the old Ant based build.
	eclipse {
		// need to specify Java source sets explicitly,
		// SpringSource Gradle Eclipse plugin ignores any nodes added in classpath.file.withXml
		sourceSets {
			main {
				file('gen').mkdirs()
				java.srcDirs 'src/main/java', 'src/main/resources', 'gen', '/twister-lib-android'
			}
		}

		jdt {
			sourceCompatibility = 1.6
			targetCompatibility = 1.6
		}


		project {
			referencedProjects 'twister-lib-android'
			referencedProjects 'android-support-v7-appcompat'
			//linkedResource name: 'res', type: '2', location: 'PROJECT_LOC/src/main/res'
			natures 'com.android.ide.eclipse.adt.AndroidNature'
			buildCommands.clear();
			buildCommand "com.android.ide.eclipse.adt.ResourceManagerBuilder"
			buildCommand "com.android.ide.eclipse.adt.PreCompilerBuilder"
			buildCommand "org.eclipse.jdt.core.javabuilder"
			buildCommand "com.android.ide.eclipse.adt.ApkBuilder"
		}

		classpath {
			def c = project.configurations
			plusConfigurations += [c.compile]
			minusConfigurations += [c.eclipseProjects]
			noExportConfigurations += [c.eclipseProjects]
			containers 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK', 'com.android.ide.eclipse.adt.LIBRARIES', 'com.android.ide.eclipse.adt.DEPENDENCIES'
			file {
				whenMerged { classpath ->
					classpath.entries.each { println it }
				}
				withXml { xmlProvider ->
					def classpath = xmlProvider.asNode()

					// <attributes><attribute name="ignore_optional_problems" value="true"/></attributes>
					classpath.grep { it.'@path' == "gen" }.each {
						def attr = it.appendNode "attributes"
						attr.appendNode "attribute", ["name": "ignore_optional_problems", "value": "true"]
					}
				}
			}
		}

		def projectPropertiesFile = file("project.properties")
		projectPropertiesFile.delete()
		def projectTarget = android.compileSdkVersion
		if (projectTarget ==~ /\d+/) { projectTarget = 'android-' + projectTarget }
		projectPropertiesFile.append 'target=' + projectTarget + '\n'

		if (plugins.hasPlugin('android-library')) {
			projectPropertiesFile.append 'android.library=true\n'
		}

		projectPropertiesFile.append 'android.library.reference.1=../android-support-v7-appcompat\n'
		projectPropertiesFile.append 'android.library.reference.2=../twister-lib-android\n'
	}
}
