plugins {
	id("net.twisterrob.inventory.root")
	id("java")
}

dependencies {
	compileOnly(utp.bundles.utp)
}

evaluationDependsOnChildren()
def connectedTasks = allprojects.collectMany { it.tasks.withType(com.android.build.gradle.internal.tasks.DeviceProviderInstrumentTestTask) }
connectedTasks.inject { prev, curr -> curr.configure { it.mustRunAfter prev }; return prev }

// Disable these temporarily because `gradlew :android:connectedCheck` fails with:
// > Included build task ':about:connectedDebugAndroidTest' was never scheduled for execution.
def includedConnectedTasks = [
//		gradle.includedBuild("twister-libs-android").task(":espresso:connectedDebugAndroidTest"),
//		gradle.includedBuild("twister-libs-android").task(":about:connectedDebugAndroidTest"),
]
connectedTasks.each { it.configure { it.mustRunAfter(includedConnectedTasks) } }

tasks.register("connectedCheck") {
//	dependsOn(gradle.includedBuild("twister-libs-android").task(':connectedCheck'))
}

//tasks.register("clean", Delete.class) { clean ->
//	clean.dependsOn gradle.includedBuilds*.task(':cleanFull')
//	clean.delete project.buildDir
//}
//
//tasks.register("build") { build ->
//	build.dependsOn(gradle.includedBuild("plugins-inventory").task(':build'))
//}

idea {
	module {
		excludeDirs += [
				// local untracked folder for junk
				rootProject.file("temp"),
				// generated by mergeAndroidReports
				new File(rootProject.buildDir, "androidTest-results"),
				new File(rootProject.buildDir, "reports/androidTests")
		]
	}
}

// run `gradlew releaseCheck -x check -x connectedCheck` to just get the output of this
// CONSIDER deprecate this against `gradlew connectedCheck --continue mergeAndroidReports` from 'android-reporting' 
task releaseCheck() {
	dependsOn getTasksByName('check', true)
	dependsOn ':android:connectedCheck'
	doLast {
		def report = { task, type, loc ->
			if (file(loc).exists()) {
				println "${task.path} ${type}: ${loc}"
			}
		}
		println "================ Report Locations ================"
		/* TODO AGP 2.x to 3.x breaking changes
		getTasksByName('lint', true).each {
			new LintHelper(it).print(report)
		}
		*/
		getAllTasks(true)
				.collectMany { it.value }
				.findAll { it instanceof Test }
				.each { Test task -> report(task, 'test', task.reports.html.entryPoint) }
	}
}
/* TODO AGP 2.x to 3.x breaking changes 
//apply plugin: 'android-reporting'
//when accessing project.android to set compileSdkVerison,
//may need to exclude this android.class.simpleName != "TestOptions_Decorated"
    
import com.android.build.gradle.internal.dsl.LintOptions
import com.android.build.gradle.tasks.Lint

class LintHelper {
	Lint task
	LintHelper(Task task) {
		this.task = (Lint)task
	}
	private static lintField(Object task, String name) {
		def field = Lint.class.getDeclaredField(name)
		field.accessible = true
		return field.get(task)
	}
	def output(ext) {
		def fatal = lintField(task, 'mFatalOnly') as boolean
		File out
		out = LintOptions.createOutputPath(task.project, 'release', ".${ext}", fatal)
		if (out.exists()) {
			return out
		}
		out = LintOptions.createOutputPath(task.project, 'debug', ".${ext}", fatal)
		if (out.exists()) {
			return out
		}
		return LintOptions.createOutputPath(task.project, task.variantName, ".${ext}", fatal)
	}
	def print(reporter) {
		def lint = lintField(task, 'mLintOptions') as com.android.builder.model.LintOptions
		if (lint.textReport) {
			reporter(task, 'text', lint.textOutput ?: output('txt'))
		}
		if (lint.htmlReport) {
			reporter(task, 'html', lint.htmlOutput ?: output('html'))
		}
		if (lint.xmlReport) {
			reporter(task, 'xml', lint.xmlOutput ?: output('xml'))
		}
	}
}
*/
