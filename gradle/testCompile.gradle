def isAndroid = plugins.hasPlugin('com.android.application') || plugins.hasPlugin('com.android.library')

repositories {
	maven { name = 'sonatype'; url = 'https://oss.sonatype.org/content/repositories/snapshots' }
}

configurations.all {
	if (it.name.contains("lintClassPath")) return
	resolutionStrategy {
		force "junit:junit:${VERSION_JUNIT}" // use snapshot version
		force "org.mockito:mockito-core:${VERSION_MOCKITO}" // powermock refers to older
		force 'org.objenesis:objenesis:2.6' // 2.4 (powermock) vs 2.6 (mockito)
		force 'com.google.guava:guava:20.0' // 17.0 (shazamcrest) vs 20.0 (robolectric)
		force 'com.thoughtworks.xstream:xstream:1.4.9' // 1.4.8 (robolectric) vs 1.4.9 (powermock)
		dependencySubstitution {
			substitute(module('org.hamcrest:hamcrest-core'))
					.with module("org.hamcrest:java-hamcrest:${VERSION_HAMCREST}")
			substitute(module('org.hamcrest:hamcrest-library'))
					.with module("org.hamcrest:java-hamcrest:${VERSION_HAMCREST}")
		}
	}
}

if (isAndroid) {
	configurations {
		// need to go for all, because of the hidden _debugAndroidTestCompile and friends
		/*[ androidTestImplementation ].each*/ all {
			if (it.name.contains("lintClassPath")) return
			it.resolutionStrategy {
				force 'com.google.code.findbugs:jsr305:3.0.2' // 2.0.1 vs 3.0.2
				force 'com.google.android.apps.common.testing.accessibility.framework:accessibility-test-framework:2.1'
				// Force some dependencies to be consistent between implementation and androidTestImplementation
				dependencySubstitution {
					[ 'support-annotations', 'support-v4', 'appcompat-v7', 'support-v13',
					  'design', 'customtabs', 'preference-v7', 'preference-v14',
					  'recyclerview-v7', 'cardview-v7', 'gridlayout-v7', 'percent', 'palette-v7',
					  'mediarouter-v7', 'leanback-v17', 'preference-leanback-v17', 'recommendation',
					  'support-vector-drawable', 'animated-vector-drawable'
					].each {
						force "com.android.support:${it}:${VERSION_SUPPORT}"
						substitute(module("com.android.support:${it}"))
								.with module("com.android.support:${it}:${VERSION_SUPPORT}")
					}
				}
			}
		}
	}
}

dependencies {
	testImplementation "junit:junit:${VERSION_JUNIT}"
	testImplementation "net.twisterrob.lib:twister-lib-hamcrest"
	testImplementation "net.twisterrob.lib:twister-lib-mockito"
	testImplementation "net.twisterrob.lib:twister-lib-junit4"
	testImplementation "org.hamcrest:hamcrest-junit:${VERSION_HAMCREST}"
	testImplementation ('com.shazam:shazamcrest:0.11') { // assertThat(*, sameBeanAs(*))
		exclude group: 'junit'
	}
	testImplementation "org.mockito:mockito-core:${VERSION_MOCKITO}"
	testImplementation "org.powermock:powermock-api-mockito2:${VERSION_POWERMOCK}"
	testImplementation "org.powermock:powermock-module-junit4:${VERSION_POWERMOCK}"
	testImplementation "org.powermock:powermock-module-junit4-rule:${VERSION_POWERMOCK}"
	// contains duplicate PowerMockRule which messes things up, do not enable
	//testImplementation "org.powermock:powermock-module-junit4-rule-agent:${VERSION_POWERMOCK}"
	testImplementation "org.powermock:powermock-classloading-xstream:${VERSION_POWERMOCK}"
	testImplementation 'com.shazam:gwen:1.0.2' // Gwen.given, Gwen.when, Gwen.then 
	testImplementation "org.slf4j:slf4j-simple:${VERSION_SLF4J}"
	testImplementation 'com.diffplug.durian:durian:3.4.0'
	// Durian needs findbugs annotations
	testCompileOnly 'com.google.code.findbugs:annotations:3.0.0'
	testImplementation 'com.github.stefanbirkner:fishbowl:1.4.0' // exceptionThrownBy (assertThrows-like)
//	testImplementation 'cglib:cglib:3.2.4'
	testImplementation 'pl.pragmatists:JUnitParams:1.1.1'
//	testImplementation 'nl.jqno.equalsverifier:equalsverifier:2.4'

	if (isAndroid) {
		testImplementation("org.robolectric:robolectric:${VERSION_ROBOLECTRIC}") {
			// robolectric has inconsistent internal dependencies
			exclude group: 'org.codehaus.plexus', module: 'plexus-utils'
		}
		// let's force plexus-utils to the latest version for robolectric
		testImplementation 'org.codehaus.plexus:plexus-utils:1.5.+'

//	configurations
//			.compile
//			.resolvedConfiguration
//			.resolvedArtifacts
//			.collect { it.id.componentIdentifier }
//			.grep { it instanceof ModuleComponentIdentifier }
//			.grep { it.group == 'com.android.support' }
//			.each { androidTestImplementation it.displayName }

		androidTestImplementation "junit:junit:${VERSION_JUNIT}"
		androidTestImplementation 'pl.pragmatists:JUnitParams:1.1.1'
		androidTestImplementation ("io.takari.junit:takari-cpsuite:1.2.7") {
			exclude group: 'junit'
		}
		androidTestImplementation "net.twisterrob.lib:twister-lib-hamcrest"
		androidTestImplementation "net.twisterrob.lib:twister-lib-mockito"
		androidTestImplementation "net.twisterrob.lib:twister-lib-junit4"
		androidTestImplementation "org.hamcrest:hamcrest-junit:${VERSION_HAMCREST}"
		androidTestImplementation ('com.shazam:shazamcrest:0.11') { // assertThat(*, sameBeanAs(*))
			exclude group: 'junit'
			exclude group: 'org.json', module: 'json'
		}
//		androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.0'
//		androidTestImplementation 'com.google.dexmaker:dexmaker:1.0'
		// Android JUnit Runner
		androidTestImplementation "com.android.support.test:runner:${VERSION_ESPRESSO_RUNNER}"
		androidTestImplementation "com.android.support.test:rules:${VERSION_ESPRESSO_RUNNER}"

		// Espresso core
		androidTestImplementation "com.android.support.test.espresso:espresso-core:${VERSION_ESPRESSO}"
		// Espresso-contrib for DatePicker, RecyclerView, Drawer actions, Accessibility checks, CountingIdlingResource
		androidTestImplementation("com.android.support.test.espresso:espresso-contrib:${VERSION_ESPRESSO}") {
			// Need to ignore support dependencies, otherwise weird exceptions happen, for example:
			// * Error inflating class android.support.v7.widget.CardView Resource is not a ColorStateList (color or path)
			// * NullPointerException (mDecorContentParent.setWindowCallback) at AppCompatDelegateImplV7.createSubDecor
			exclude group: 'com.android.support'
		}
		// Espresso-accessibility for automatic checking (not used yet)
		// TODO AccessibilityChecks.enable()
		//androidTestImplementation "com.android.support.test.espresso:espresso-accessibility:${VERSION_ESPRESSO}"
		// disable web for now, because it has some conflicting Guava classes (http://b.android.com/187735)
		// Espresso-web for WebView support (not used yet)
		//androidTestImplementation "com.android.support.test.espresso:espresso-web:${VERSION_ESPRESSO}"
		// Espresso-intents for capturing Intents and mocking onActivityResult
		androidTestImplementation "com.android.support.test.espresso:espresso-intents:${VERSION_ESPRESSO}"
		// Espresso-idling-resource for synchronization with background jobs
		androidTestImplementation "com.android.support.test.espresso:espresso-idling-resource:${VERSION_ESPRESSO}"
		// CONSIDER using these with Glide
		if (VERSION_ESPRESSO.startsWith("3.")) {
			androidTestImplementation "com.android.support.test.espresso.idling:idling-concurrent:${VERSION_ESPRESSO}"
			androidTestImplementation "com.android.support.test.espresso.idling:idling-net:${VERSION_ESPRESSO}"
		}
		// UI Automator @SdkSuppress(minSdkVersion = VERSION_CODES.JELLY_BEAN_MR2)
		androidTestImplementation "com.android.support.test.uiautomator:uiautomator-v18:2.+"
	}
}
