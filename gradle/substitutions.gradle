configurations.all {
	if (it.name.contains("lintClassPath")) return
	resolutionStrategy {
		dependencySubstitution {
			substitute(module('org.hamcrest:hamcrest-core'))
					.with module("org.hamcrest:java-hamcrest:${VERSION_HAMCREST}")
			substitute(module('org.hamcrest:hamcrest-library'))
					.with module("org.hamcrest:java-hamcrest:${VERSION_HAMCREST}")
		}
	}
}

def configAndroid = {
	// Substitutions for Guava on Android
	configurations.all { Configuration config ->
		if (!config.name.startsWith("androidTest") && !config.name.startsWith("debugAndroidTest")) return
		config.resolutionStrategy { ResolutionStrategy strategy ->
			strategy.dependencySubstitution {
				all { DependencySubstitution dep ->
					if (dep.requested instanceof ModuleComponentSelector
							&& dep.requested.module == "guava"
							&& dep.requested.group == "com.google.guava") {
						// need to use the Android dependency, otherwise Dex/R8/Jetifier fails
						def androidVersion = dep.requested.version.replace("-jre", "-android")
						dep.useTarget("com.google.guava:guava:${androidVersion}")
					}
				}
			}
		}
	}
}
plugins.withId('com.android.application', configAndroid)
plugins.withId('com.android.library', configAndroid)
