plugins {
	id("net.twisterrob.inventory.android.app")
	id("net.twisterrob.inventory.mapping")
	id("net.twisterrob.inventory.androidTest")
	id("net.twisterrob.inventory.upgradeTest")
}

dependencies {
	implementation project(':android:base')
	implementation project(':android:database')
	implementation project(':android:backup')
	implementation project(':android:preferences')
	testImplementation project(':android:test_helpers')

	implementation('net.twisterrob.lib:twister-lib-android-monolith')
	implementation "net.twisterrob.lib:twister-lib-android-glide3"
	implementation('net.twisterrob.lib:twister-lib-general')
	implementation 'net.twisterrob.lib:twister-lib-android-basics'
	implementation 'net.twisterrob.lib:twister-lib-android-widgets'
	implementation 'net.twisterrob.lib:twister-lib-android-settings'
	implementation 'net.twisterrob.lib:twister-lib-android-about'
	implementation 'net.twisterrob.lib:twister-lib-android-logging'
	implementation 'net.twisterrob.lib:twister-lib-android-stringers'
	implementation 'net.twisterrob.lib:twister-lib-android-capture_image'
	runtimeOnly('net.twisterrob.lib:twister-lib-android-slf4j')

	implementation "androidx.annotation:annotation:${VERSION_ANDROIDX_ANNOTATION}"
	implementation "androidx.localbroadcastmanager:localbroadcastmanager:${VERSION_ANDROIDX_BROADCAST}"
	implementation "androidx.appcompat:appcompat:${VERSION_ANDROIDX_APPCOMPAT}"
	implementation "com.google.android.material:material:${VERSION_ANDROIDX_MATERIAL}"
	implementation "androidx.recyclerview:recyclerview:${VERSION_ANDROIDX_RECYCLERVIEW}"
	implementation "androidx.swiperefreshlayout:swiperefreshlayout:${VERSION_ANDROIDX_SWIPEREFRESHLAYOUT}"
	implementation "com.google.android:flexbox:${VERSION_FLEXBOX}"
	implementation "org.slf4j:slf4j-api:${VERSION_SLF4J}"

	// Class.forName("org.apache.xml.serializer.Version").getDeclaredMethod("main", String[].class)
	// .invoke(null, new Object[] { new String[0] }); // shows "Serializer Java 2.7.1" on Genymotion 2.3.7 and S5 5.0.0
//	compileOnly "xalan:xalan:2.7.1"

//	debugImplementation 'com.facebook.stetho:stetho:1.3.1'
//	debugImplementation 'com.facebook.stetho:stetho-js-rhino:1.3.1'
//	debugImplementation 'com.idescout.sql:sqlscout-server:1.0'

	apply from: "${rootDir}/gradle/testCompile.gradle", to: project

	androidTestImplementation "net.twisterrob.lib:twister-lib-android-espresso"
	androidTestImplementation "net.twisterrob.lib:twister-lib-android-espresso_actors"
	androidTestImplementation "net.twisterrob.lib:twister-lib-android-espresso_glide3"
	androidTestImplementation "net.twisterrob.lib:twister-lib-android-cpsuite"
	androidTestImplementation "net.twisterrob.lib:twister-lib-android-uiautomator"
	androidTestImplementation "net.twisterrob.lib:twister-lib-android-about-test_helpers"
	androidTestImplementation "net.twisterrob.lib:twister-lib-android-capture_image-test_helpers"
	androidTestImplementation project(':android:database:test_helpers')
	androidTestImplementation "androidx.preference:preference:${VERSION_ANDROIDX_PREFERENCE}"
}

android {
	defaultConfig {
		// TODEL OldTargetApi lint when bumping to 30
		targetSdkVersion 29
		applicationId 'net.twisterrob.inventory'
		version {
			major = 1
			minor = 2
			patch = 0
		}
		resConfigs "en_GB", "en_NZ", "en_AU" //, "hu"
		testInstrumentationRunner 'net.twisterrob.android.test.junit.AndroidJUnitRunner'
	}
	lintOptions {
		checkAllWarnings = true
		checkDependencies = true
	}
	testOptions.unitTests.includeAndroidResources = true // Robolectric
	testBuildType "debug" // CONSIDER release
	buildTypes {
		release {
			//debuggable true
			shrinkResources true // http://tools.android.com/tech-docs/new-build-system/resource-shrinking
		}
		debug {
			//minifyEnabled true
			multiDexKeepProguard file('src/androidTest/multidex.pro')
		}
	}
	aaptOptions {
		noCompress 'svg' // Resources.openRawResourceFd can only open AssetFileDescriptor for uncompressed resources
		def defaultIgnoreAssetsPattern = '!.svn:!.git:!.ds_store:!*.scc:.*:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~'
		ignoreAssetsPattern defaultIgnoreAssetsPattern + ':!descript.ion:!*.yuml:!*.yuml.png'
	}
	sourceSets.test.java.srcDir 'src/test/robolectricJava'
}

//noinspection UnnecessaryQualifiedReference
tasks.register("generateHtmlReportFromXml", net.twisterrob.gradle.android.tasks.TestReportGenerator.class) {
	input = new File(rootDir, 'temp/tests')
	output = new File(rootDir, 'temp/tests_results')
	outputs.upToDateWhen { false }
}

dependencies.components {
	withModule("io.takari.junit:takari-cpsuite") {
		withVariant("runtime") { variant ->
			def field = org.gradle.api.internal.artifacts.repositories.resolver.VariantMetadataAdapter.class.getDeclaredField("metadata")
			field.setAccessible(true)
			def metadata = field.get(variant) as org.gradle.internal.component.external.model.maven.DefaultMutableMavenModuleResolveMetadata
			metadata.setPackaging("jar")
		}
	}
}
