import org.gradle.api.initialization.resolve.RepositoriesMode
import static net.twisterrob.gradle.GradleUtils.doNotNagAbout

pluginManagement {
	includeBuild("gradle/plugins-inventory")
	repositories {
		google()
		mavenCentral()
		exclusiveContent {
			forRepository {
				gradlePluginPortal()
			}
			filter {
				includeModule("com.gradle.develocity", "com.gradle.develocity.gradle.plugin")
				includeModule("com.gradle", "develocity-gradle-plugin")
			}
		}
	}
}

plugins {
	id("net.twisterrob.gradle.plugin.settings") version "0.17"
	id("com.gradle.develocity") version "3.18.1"
}

// TODO IsCIKt.CI is not visible in settings.gradle.
def CI = System.getenv("GITHUB_ACTIONS") == "true"

dependencyResolutionManagement {
	includeBuild("gradle/platform-inventory")
	repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
	repositories {
		google()
		mavenCentral()
		ivy {
			name = "GitHub raw"
			url = "https://github.com/"
			patternLayout { artifact("/[organisation]/raw/[revision]/[module].[ext]") }
			metadataSources.artifact()
		}
	}
}

rootProject.name = 'Inventory'

include(":android")
include(":android:base")
include(":android:test_helpers")
includeWithContract(":android:database")
include(":android:database:test_helpers")
include(":android:database:sqlite3")
include(":android:preferences")
include(":android:data")
include(":android:data:svg")
include(":android:backup")
include(":android:space")
include(":tools:transform")

void includeWithContract(String projectPath) {
	include(projectPath)
	def contractProjectPath = "${projectPath}-contract"
	include(contractProjectPath)
	project(contractProjectPath).projectDir = new File(project(projectPath).projectDir, "contract")
}

includeBuild("libs") { build ->
	apply from: new File(build.projectDir, "gradle/settings.substitutions.gradle"), to: build
}

develocity {
	buildScan {
		termsOfUseUrl = "https://gradle.com/help/legal-terms-of-use"
		termsOfUseAgree = "yes"
	}
}

def gradleVersion = GradleVersion.current().version

// TODEL Gradle 8.8 sync in IDEA 2024.1.4 https://youtrack.jetbrains.com/issue/IDEA-353787.
if ((System.getProperty("idea.version") ?: "") < "2024.2") {
	doNotNagAbout(
			"The CopyProcessingSpec.getFileMode() method has been deprecated. " +
					"This is scheduled to be removed in Gradle 9.0. " +
					"Please use the getFilePermissions() method instead. " +
					"Consult the upgrading guide for further information: " +
					"https://docs.gradle.org/${gradleVersion}/userguide/upgrading_version_8.html#unix_file_permissions_deprecated",
			"at com.intellij.gradle.toolingExtension.impl.model.resourceFilterModel.GradleResourceFilterModelBuilder.getFilters(GradleResourceFilterModelBuilder.groovy:46)"
	)
	doNotNagAbout(
			"The CopyProcessingSpec.getDirMode() method has been deprecated. " +
					"This is scheduled to be removed in Gradle 9.0. " +
					"Please use the getDirPermissions() method instead. " +
					"Consult the upgrading guide for further information: " +
					"https://docs.gradle.org/${gradleVersion}/userguide/upgrading_version_8.html#unix_file_permissions_deprecated",
			"at com.intellij.gradle.toolingExtension.impl.model.resourceFilterModel.GradleResourceFilterModelBuilder.getFilters(GradleResourceFilterModelBuilder.groovy:46)"
	)
} else {
	def error = CI ? { throw new IllegalStateException(it) } : logger::warn
	error("IDEA version changed, please review hack.")
}
