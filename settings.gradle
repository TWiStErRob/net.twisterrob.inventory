import org.gradle.api.initialization.resolve.RepositoriesMode

pluginManagement {
	includeBuild("gradle/plugins-inventory")
	repositories {
		google()
		mavenCentral()
		exclusiveContent {
			forRepository {
				gradlePluginPortal()
			}
			filter {
				includeModule("com.gradle.develocity", "com.gradle.develocity.gradle.plugin")
				includeModule("com.gradle", "develocity-gradle-plugin")
			}
		}
	}
}

plugins {
	id("net.twisterrob.gradle.plugin.settings") version "0.18"
	id("com.gradle.develocity") version "4.0"
}

// TODO IsCIKt.CI is not visible in settings.gradle.
def CI = System.getenv("GITHUB_ACTIONS") == "true"

dependencyResolutionManagement {
	includeBuild("gradle/platform-inventory")
	repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
	repositories {
		google()
		mavenCentral()
		ivy {
			name = "GitHub raw"
			url = "https://github.com/"
			patternLayout { artifact("/[organisation]/raw/[revision]/[module].[ext]") }
			metadataSources.artifact()
		}
	}
}

rootProject.name = 'Inventory'

include(":android")
include(":android:base")
include(":android:test_helpers")
includeWithContract(":android:database")
include(":android:database:test_helpers")
include(":android:database:sqlite3")
include(":android:preferences")
include(":android:data")
include(":android:data:svg")
include(":android:backup")
include(":android:space")
include(":tools:transform")

void includeWithContract(String projectPath) {
	include(projectPath)
	def contractProjectPath = "${projectPath}-contract"
	include(contractProjectPath)
	project(contractProjectPath).projectDir = new File(project(projectPath).projectDir, "contract")
}

includeBuild("libs") { build ->
	apply from: new File(build.projectDir, "gradle/settings.substitutions.gradle"), to: build
}

develocity {
	buildScan {
		termsOfUseUrl = "https://gradle.com/help/legal-terms-of-use"
		termsOfUseAgree = "yes"
	}
}
