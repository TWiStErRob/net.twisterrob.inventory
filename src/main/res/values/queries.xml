<?xml version="1.0" encoding="utf-8"?>
<resources xmlns:tools="http://schemas.android.com/tools"
           tools:ignore="TypographyDashes">
	<string name="query_properties" translatable="false"><![CDATA["
		select
			'property'                                        as type,
			p._id                                             as _id,
			p.name                                            as name,
			p.type                                            as typeID,
			p.image IS NOT NULL                               as hasImage,
			p.image_time                                      as imageTime,
			COALESCE(pt.image, ptk.image)                     as typeImage,
			(select count(*) from Room where property = p._id) as countChildren
		from Property         p
		join PropertyType     pt  ON p.type = pt._id
		join PropertyTypeKind ptk ON pt.kind = ptk._id
		order by p.name
	"]]></string>
	<string name="query_property" translatable="false"><![CDATA["
		select
			'property'                                        as type,
			p._id                                             as _id,
			p.name                                            as name,
			p.description                                     as description,
			p.type                                            as typeID,
			p.image IS NOT NULL                               as hasImage,
			p.image_time                                      as imageTime,
			COALESCE(pt.image, ptk.image)                     as typeImage,
			(select count(*) from Room where property = p._id) as countChildren,
			(select count(*) from Item where parent in (select root from Room where property = p._id)) as countDirectItems,
			(select count(distinct item) from Item_Path_Node where root in (select root from Room where property = p._id) and root <> node) as countAllItems
		from Property         p
		join PropertyType     pt  ON p.type = pt._id
		join PropertyTypeKind ptk ON pt.kind = ptk._id
		where p._id = ?
	"]]></string>
	<string name="query_property_types" translatable="false"><![CDATA["
			select
				ptk._id                                 as kind,
				CASE WHEN pt._id == 0 THEN 1 ELSE 0 END as strong,
				1 == 1                                  as enabled,
				CASE WHEN pt._id == 0 THEN 0 ELSE 1 END as level,
				'PropertyType'                          as source,
				pt._id                                  as _id,
				pt.name                                 as name,
				COALESCE(pt.image, ptk.image)           as typeImage
			from PropertyType     pt
			join PropertyTypeKind ptk ON pt.kind = ptk._id
		UNION
			select
				ptk._id                                 as kind,
				1 == 1                                  as strong,
				1 == 2                                  as enabled,
				0                                       as level,
				'PropertyTypeKind'                      as source,
				-1                                      as _id,
				ptk.name                                as name,
				ptk.image                               as typeImage
			from PropertyTypeKind ptk
			where ptk._id <> 0
		order by kind, _id
	"]]></string>


	<string name="query_room_types" translatable="false"><![CDATA["
			select
				rtk._id                                 as kind,
				CASE WHEN rt._id == 0 THEN 1 ELSE 0 END as strong,
				1 == 1                                  as enabled,
				CASE WHEN rt._id == 0 THEN 0 ELSE 1 END as level,
				'RoomType'                              as source,
				rt._id                                  as _id,
				rt.name                                 as name,
				COALESCE(rt.image, rtk.image)           as typeImage
			from RoomType     rt
			join RoomTypeKind rtk ON rt.kind = rtk._id
		UNION
			select
				rtk._id                                 as kind,
				1 == 1                                  as strong,
				1 == 2                                  as enabled,
				0                                       as level,
				'RoomTypeKind'                          as source,
				-1                                      as _id,
				rtk.name                                as name,
				rtk.image                               as typeImage
			from RoomTypeKind rtk
			where rtk._id <> 0
		order by kind, _id
	"]]></string>
	<string name="query_rooms" translatable="false"><![CDATA["
		select
			'room'                                           as type,
			r._id                                            as _id,
			r.root                                           as root,
			r.name                                           as name,
			r.type                                           as typeID,
			r.image IS NOT NULL                              as hasImage,
			r.image_time                                     as imageTime,
			COALESCE(rt.image, rtk.image)                    as typeImage,
			p._id                                            as property,
			p.name                                           as propertyName,
			(select count(*) from Item where parent = r.root) as countChildren
		from Room         r
		join RoomType     rt  ON r.type = rt._id
		join RoomTypeKind rtk ON rt.kind = rtk._id
		join Property     p   ON r.property = p._id
		where p._id = ? or ? = 'null'
		order by r.name
	"]]></string>
	<string name="query_room" translatable="false"><![CDATA["
		select
			'room'                                           as type,
			r._id                                            as _id,
			r.name                                           as name,
			r.description                                    as description,
			r.type                                           as typeID,
			r.root                                           as root,
			p._id                                            as property,
			p.name                                           as propertyName,
			r.image IS NOT NULL                              as hasImage,
			r.image_time                                     as imageTime,
			COALESCE(rt.image, rtk.image)                    as typeImage,
			(select count(*) from Item where parent = r.root) as countDirectItems,
			(select count(distinct item) from Item_Path_Node where root = r.root and root <> node) as countAllItems
		from Room         r
		join RoomType     rt  ON r.type = rt._id
		join RoomTypeKind rtk ON rt.kind = rtk._id
		join Property     p   ON r.property = p._id
		where r._id = ?
	"]]></string>

	<string name="query_categories_all" translatable="false"><![CDATA["
		select
			'category'        as type,
			ct._id            as _id,
			ct.name           as name,
			ct.parent         as parent,
			ct.level          as level,
			ct.children       as countChildren,
			ct.descendants    as countAllChildren,
			ct.image          as typeImage,
			ct.parent IS NULL as strong,
			ct.root           as root
		from Category_Tree ct
		where ct._id <> -1 -- don't return category_internal
		order by ct._id
	"]]></string>

	<string name="query_item_categories" translatable="false"><![CDATA["
		select
			'category'     as type,
			ct._id         as _id,
			ct.name        as name,
--			cnc.value      as name,
			ct.parent      as parent,
			ct.level       as level,
			ct.children    as countChildren,
			ct.descendants as countAllChildren,
			ct.mixed       as mixed,
			ct.root        as root,
			cr.source as source,
			(
				-- both the selected and the related are top-level
--				(c.parent is null and ct.parent is null)
--				or
				-- the related is an ascendant of selected
				exists (select 1 from Category_Descendant where category = ct._id and descendant = c._id)
				or
				(
					-- the related is a descendant of selected
					exists (select 1 from Category_Descendant where category = c._id and descendant = ct._id)
					and
					(
						-- the related has children
						ct.descendants > 0
						or
						-- the related is a direct child of selected
						ct.parent = c._id
					)
				)
			)              as strong,
			ct.image       as typeImage
		from Category            c
		join Category_Related    cr  ON cr.category = c._id
		join Category_Tree       ct  ON ct._id = cr.related
--		join Category_Name_Cache cnc ON cnc.key = ct.name
		where c._id = ? and ct._id <> -1 -- don't return category_internal
		order by _id, level
	"]]></string>
	<!-- CONSIDER rewrite with one argument and use it for by_room -->
	<string name="query_items_by_item" tools:ignore="Typos" translatable="false"><![CDATA["
		select
			'item'                                          as type,
			i._id                                           as _id,
--			g._id                                           as gid,
			i._id = g._id                                   as [group],
			i.name                                          as name,
			c._id                                           as typeID,
			i.image IS NOT NULL                             as hasImage,
			i.image_time                                    as imageTime,
			c.image                                         as typeImage,
			(select count(*) from Item where parent = i._id) as countChildren,
			c.name                                          as category
		from      Item      i
		join      Category  c ON i.category = c._id
		join (
				select
					i._id,
					case when i.parent <> ? -- inside one of the flattened groups
						then p._id
						else -- not inside a group
							case when i.category = 1 /* category_group */ -- but is a group
								then i._id -- this will be the header
								else null -- these items are just inside the item without groups
							end
					end as gid
				from Item i
				join Item p ON i.parent = p._id
		) as      Groups      ON Groups._id = i._id
		left join Item      g ON Groups.gid = g._id
		where i.parent = ? -- children
			or i.parent in -- grandchildren
				(select _id from Item where parent = ? and category = 1 /* category_group */)
		order by g.name, not [group], i.category <> 1, name
	"]]></string>
	<string name="query_item" translatable="false"><![CDATA["
		select
			'item'                                          as type,
			i._id                                           as _id,
			i.name                                          as name,
			i.description                                   as description,
			i.image IS NOT NULL                             as hasImage,
			i.image_time                                    as imageTime,
			c.image                                         as typeImage,
			ip.categoryID                                   as typeID,
			ip.categoryName                                 as categoryName,
			ip.propertyID                                   as propertyID,
			ip.propertyName                                 as propertyName,
			ip.rootItemID                                   as roomItemID,
			ip.roomID                                       as roomID,
			ip.roomName                                     as roomName,
			i.parent                                        as parent,
			group_concat(Path.part, ' < ')                  as parentName,
			(select count(*) from Item where parent = i._id) as countDirectItems,
			(select count(distinct item) from Item_Path_Node where node = i._id and item <> node) as countAllItems
		from      Item      i
		join      Category  c  ON i.category = c._id
		join      Item_Path ip ON i._id = ip.itemID
		left join (
				select n.name as part
				from Item_Path_Node ipn
				join Item           n   ON ipn.node = n._id
				where ipn.item = ? and ipn.item <> ipn.node and ipn.node <> ipn.root
				order by level DESC
		) as      Path
		where i._id = ?
	"]]></string>
	<string name="query_items" translatable="false"><![CDATA["
		select
			'item'                                          as type,
			i._id                                           as _id,
			i.name                                          as name,
			c._id                                           as typeID,
			i.image IS NOT NULL                             as hasImage,
			i.image_time                                    as imageTime,
			c.image                                         as typeImage,
			(select count(*) from Item where parent = i._id) as countChildren,
			c.name                                          as category
		from Item     i
		join Category c ON i.category = c._id
		where c._id <> -1 -- don't return category_internal items
		order by i.name
	"]]></string>

	<string name="query_items_by_category" translatable="false"><![CDATA["
		select
			'item'                                          as type,
			i._id                                           as _id,
			i.name                                          as name,
			c._id                                           as typeID,
			i.image IS NOT NULL                             as hasImage,
			i.image_time                                    as imageTime,
			c.image                                         as typeImage,
			(select count(*) from Item where parent = i._id) as countChildren,
			c.name                                          as category
		from Item     i
		join Category c ON i.category = c._id
		where i.category = ?
		order by i.name
	"]]></string>
	<string name="query_items_in_category" translatable="false"><![CDATA["
		select
			'item'                                          as type,
			i._id                                           as _id,
			i.name                                          as name,
			c._id                                           as typeID,
			i.image IS NOT NULL                             as hasImage,
			i.image_time                                    as imageTime,
			c.image                                         as typeImage,
			(select count(*) from Item where parent = i._id) as countChildren,
			c.name                                          as category
		from Item                i
		join Category_Descendant cd ON i.category = cd.descendant
		join Category            c  ON cd.descendant = c._id
		where cd.category = ?
		order by i.name
	"]]></string>
	<string name="query_item_parents" formatted="false" translatable="false"><![CDATA["
		select * from (
			-- Item from tree
			select
					n.item                              as item,
					n.level + 2                         as level,
					'item'                              as parentType,
					i._id                               as _id,
					i.name                              as name,
					c._id                               as typeID,
					c.name                              as typeName,
					c.image                             as typeImage,
					i.image IS NOT NULL                 as hasImage,
					i.image_time                        as imageTime
				from Item_Path_Node n
				join Item           i ON i._id = n.node
				join Category       c ON i.category = c._id
				where n.root <> n.node
			union all
			-- Item (ROOT)
			/*select
					n.item                              as item,
					2                                   as level,
					'root'                              as parentType,
					i._id                               as _id,
					i.name                              as name,
					c._id                               as typeID,
					c.name                              as typeName,
					c.image                             as typeImage,
					i.image IS NOT NULL                 as hasImage,
					i.image_time                        as imageTime
				from Item_Path_Node n
				join Item           i ON i._id = n.node
				join Category       c ON i.category = c._id
				where n.root = n.node
			union all*/
			-- Room
			select
					n.item                              as item,
					2                                   as level,
					'room'                              as parentType,
					r._id                               as _id,
					r.name                              as name,
					rt._id                              as typeID,
					rt.name                             as typeName,
					COALESCE(rt.image, rtk.image)       as typeImage,
					r.image IS NOT NULL                 as hasImage,
					r.image_time                        as imageTime
				from Item_Path_Node n
				join Room           r   ON n.root = r.root
				join RoomType       rt  ON r.type = rt._id
				join RoomTypeKind   rtk ON rt.kind = rtk._id
				where n.root = n.node
			union all
			-- Property
			select
					n.item                              as item,
					1                                   as level,
					'property'                          as parentType,
					p._id                               as _id,
					p.name                              as name,
					pt._id                              as typeID,
					pt.name                             as typeName,
					COALESCE(pt.image, ptk.image)       as typeImage,
					p.image IS NOT NULL                 as hasImage,
					p.image_time                        as imageTime
				from Item_Path_Node n
				join Room             r   ON n.root = r.root
				join Property         p   ON r.property = p._id
				join PropertyType     pt  ON p.type = pt._id
				join PropertyTypeKind ptk ON pt.kind = ptk._id
				where n.root = n.node
		)
		where item = ?
		order by level asc
	"]]></string>


	<string name="query_categories" translatable="false"><![CDATA["
		select
			'category'                                          as type,
			c._id                                               as _id,
			c.name                                              as name,
			1 <> 2                                              as hasImage,
			c.image                                             as typeImage,
			(select count(*) from Category where parent = c._id) as countChildren,
			(select count(*) from Item where category in (select descendant from Category_Descendant where category = c._id)) as countAllItems
		from      Category            c
		left join Category_Name_Cache cnc ON cnc.key = c.name
		where c.parent = ? or (? = 'null' and c.parent is null)
		      and c._id <> -1 -- don't return category_internal
		order by (
			CASE
			WHEN NOT EXISTS (select descendant from Category_Descendant where category = c._id and descendant <> category)
			THEN CAST(X'FFFD' AS TEXT) || (
				CASE
					WHEN c.name = 'category_uncategorized' THEN CAST(X'FFFD' AS TEXT)
					ELSE ifNULL(cnc.value, c.name)
				END
			)
			ELSE ifNULL(cnc.value, c.name)
			END
		)
		;
	"]]></string>
	<string name="query_category" translatable="false"><![CDATA["
		select
			'category'                                          as type,
			c._id                                               as _id,
			c.name                                              as name,
			c.image                                             as typeImage,
			c.parent                                            as parent,
			ifNULL(ppnc.value || ' > ', '') || pnc.value        as parentName,
			(select count(*) from Category where parent = c._id) as countChildren,
			(select count(*) from Category_Descendant where category = c._id and category <> descendant) as countAllChildren,
			(select count(*) from Item where category = c._id)   as countDirectItems,
			(select count(*) from Item where category in (select descendant from Category_Descendant where category = c._id)) as countAllItems
		from      Category            c
		left join Category            p    ON c.parent = p._id
		left join Category_Name_Cache pnc  ON p.name = pnc.key
		left join Category            pp   ON p.parent = pp._id
		left join Category_Name_Cache ppnc ON pp.name = ppnc.key
		where c._id = ?
	"]]></string>

	<string name="query_list_list" translatable="false"><![CDATA["
		select
			'list'                                              as type,
			l._id                                               as _id,
			l.name                                              as name,
			exists ( select 1 from List_Entry where list = l._id and item = ? ) as [exists],
			(select count(*) from List_Entry where list = l._id) as countChildren
		from List       l
		order by l.name
	"]]></string>
	<string name="query_list" translatable="false"><![CDATA["
		select
			'list' as type,
			_id    as _id,
			name   as name
		from List
		where _id = ?
	"]]></string>
	<string name="query_list_create" translatable="false"><![CDATA["
		insert into List(name) values(?)
	"]]></string>
	<string name="query_list_update" translatable="false"><![CDATA["
		update List set name = ? where _id = ?
	"]]></string>
	<string name="query_list_find" translatable="false"><![CDATA["
		select _id from List where name = ?
	"]]></string>
	<string name="query_list_delete" translatable="false"><![CDATA["
		delete from List where _id = ?
	"]]></string>
	<string name="query_list_entry_add" translatable="false"><![CDATA["
		insert into List_Entry(list, item) values(?, ?)
	"]]></string>
	<string name="query_list_entry_remove" translatable="false"><![CDATA["
		delete from List_Entry where list = ? and item = ?
	"]]></string>
	<string name="query_items_by_list" translatable="false"><![CDATA["
		select
			'item'                                          as type,
			i._id                                           as _id,
			i.name                                          as name,
			c._id                                           as typeID,
			i.image IS NOT NULL                             as hasImage,
			i.image_time                                    as imageTime,
			c.image                                         as typeImage,
			(select count(*) from Item where parent = i._id) as countChildren,
			c.name                                          as category
		from List       l
		join List_Entry le ON l._id = le.list
		join Item       i  ON le.item = i._id
		join Category   c  ON i.category = c._id
		where l._id = ?
		order by i.name
	"]]></string>

	<string name="query_recents" translatable="false"><![CDATA["
		select
			'item'                              as type,
			i._id                               as _id,
			i.name                              as name,
			i.image IS NOT NULL                 as hasImage,
			i.image_time                        as imageTime,
			c.image                             as typeImage,
			datetime(r.visit, 'localtime')      as visit,
			r.recency                           as recency,
			r.visitRank                         as visitRank,
			r.population                        as population,
			r.percentage                        as percentage,
			r.populationRank                    as populationRank
		from Recents  r
		join Item     i  ON r._id = i._id
		join Category c  ON i.category = c._id
		order by visitRank * ? + populationRank * ?
	"]]></string>
	<string name="query_recent_add" translatable="false"><![CDATA["
		insert into Recent(_id) values(?)
	"]]></string>
	<string name="query_recent_delete" translatable="false"><![CDATA["
		delete from Recent where _id = ?
	"]]></string>

	<string name="query_search_suggest" translatable="false"><![CDATA["
		select
			s.rowid    as _id,                    -- BaseColumns._ID (for ListView)
			NULL       as suggest_intent_action,  -- SearchManager.SUGGEST_COLUMN_INTENT_ACTION
			s._id      as suggest_intent_data_id, -- SearchManager.SUGGEST_COLUMN_INTENT_DATA_ID
			NULL       as suggest_icon_1,         -- SearchManager.SUGGEST_COLUMN_ICON_1
--			'content://net.twisterrob.inventory.debug/item/'     || i._id || '/image' as suggest_icon_1, -- SearchManager.SUGGEST_COLUMN_ICON_1
--			'content://net.twisterrob.inventory.debug/category/' || c._id || '/image' as suggest_icon_2, -- SearchManager.SUGGEST_COLUMN_ICON_2
			s.name     as suggest_text_1,         -- SearchManager.SUGGEST_COLUMN_TEXT_1
			s.location as suggest_text_2          -- SearchManager.SUGGEST_COLUMN_TEXT_2
		from Search   s
--		join Item     i ON s._id = i._id
--		join Category c ON i.category = c._id
		where s.name MATCH ?
		order by s.name
	"]]></string>
	<string name="query_search" translatable="false"><![CDATA["
		select
			'item'                                          as type,
			i._id                                           as _id,
			i.name                                          as name,
			c._id                                           as typeID,
			i.image IS NOT NULL                             as hasImage,
			i.image_time                                    as imageTime,
			c.image                                         as typeImage,
			(select count(*) from Item where parent = i._id) as countChildren,
			c.name                                          as category
		from Item     i
		join Category c ON i.category = c._id
		join Search   s ON i._id = s._id
		where s.name MATCH ?
		order by i.name
	"]]></string>
	<string name="query_search_size" translatable="false"><![CDATA["
		-- sum 0 rows is NULL, count 0 rows is 0
		select coalesce(sum(length(name) + length(location)), 0) + count(*) * 4 * 3 from Search
	"]]></string>

	<string name="query_export" formatted="false" translatable="false"><![CDATA["
			select
				'property'    as type,
				pt.name       as typeName,
				p.name        as propertyName,
				null          as roomName,
				null          as itemName,
				p.description as description,
				CASE WHEN p.image is not null
				THEN 'property'
					|| '_' || p._id
					|| '_' || strftime('%Y%m%d_%H%M%S', p.image_time / 1000, 'unixepoch', 'localtime')
					|| '.jpg'
				ELSE NULL END as imageName,
				p.image_time  as imageTime,
				null          as parentType,
				null          as parent,
				null          as parentName,
				p._id         as _id
			from Property     p
			join PropertyType pt ON p.type = pt._id
		UNION ALL
			select
				'room'        as type,
				rt.name       as typeName,
				p.name        as propertyName,
				r.name        as roomName,
				null          as itemName,
				r.description as description,
				CASE WHEN r.image is not null
				THEN 'room'
					|| '_' || r._id
					|| '_' || strftime('%Y%m%d_%H%M%S', r.image_time / 1000, 'unixepoch', 'localtime')
					|| '.jpg'
				ELSE NULL END as imageName,
				r.image_time  as imageTime,
				'property'    as parentType,
				p._id         as parent,
				p.name        as parentName,
				r._id         as _id
			from Room     r
			join RoomType rt ON r.type = rt._id
			join Property p  ON r.property = p._id
		UNION ALL
			select
				'item'        as type,
				c.name        as typeName,
				p.name        as propertyName,
				r.name        as roomName,
				i.name        as itemName,
				i.description as description,
				CASE WHEN i.image is not null
				THEN 'item'
					|| '_' || i._id
					|| '_' || strftime('%Y%m%d_%H%M%S', i.image_time / 1000, 'unixepoch', 'localtime')
					|| '.jpg'
				ELSE NULL END as imageName,
				i.image_time  as imageTime,
				CASE WHEN i.parent <> r.root THEN 'item'  ELSE 'room' END as parentType,
				CASE WHEN i.parent <> r.root THEN pi._id  ELSE r._id  END as parent,
				CASE WHEN i.parent <> r.root THEN pi.name ELSE r.name END as parentName,
				i._id         as _id
			from Item           i
			join Item           pi ON i.parent = pi._id
			join Category       c  ON i.category = c._id and c._id <> -1 -- don't return category_internal
			join Item_Path_Node ip ON ip.item = i._id and ip.node = i._id
			join Room           r  ON ip.root = r.root
			join Property       p  ON r.property = p._id
-- FIXME			order by type, _id?
	"]]></string>


	<string name="query_subtree" translatable="false"><![CDATA["
			select
				'property' as type,
				p._id,
				p.name,
				null as parentType,
				null as parent
			from Property p
			where p._id = ? or (? = 'null' and ? = 'null')
		UNION ALL
			select
				'room' as type,
				r._id,
				r.name,
				'property' as parentType,
				r.property as parent
			from Room r
			where r.property = ? or r._id = ? or (? = 'null')
		UNION ALL
			select distinct
				'item' as type,
				i._id,
				i.name,
				CASE WHEN i.parent <> r.root THEN 'item'   ELSE 'room' END as parentType,
		        CASE WHEN i.parent <> r.root THEN i.parent ELSE r._id  END as parent
			from Item_Path_Node ipn
			join Item i on ipn.item = i._id and i.category <> -1
			join Room r on r.root = ipn.root
			join Property p on r.property = p._id
			where p._id = ? or r._id = ? or ipn.node = ? or (? = 'null' and ? = 'null' and ? = 'null')
	"]]></string>

	<string name="query_stats" translatable="false"><![CDATA["
		select
			(select count(*) from Property) as properties,
			(select count(*) from Room) as rooms,
			(select count(*) from Item) - (select count(*) from Room) as items,
			(select count(*) from Category) as categories
	"]]></string>


	<string name="query_category_cache_names" translatable="false"><![CDATA["
		select key from Category_Name_Cache
	"]]></string>
	<string name="query_category_cache_update" translatable="false"><![CDATA["
		update Category_Name_Cache set value = ? where key = ?
	"]]></string>


	<!-- Property CRUD -->
	<string name="query_property_create" translatable="false"><![CDATA["
		insert into Property(type, name, description) values(?, ?, ?)
	"]]></string>
	<string name="query_property_find" translatable="false"><![CDATA["
		select _id from Property where name = ?
	"]]></string>
	<string name="query_property_update" translatable="false"><![CDATA["
		update Property set type = ?, name = ?, description = ? where _id = ?
	"]]></string>
	<string name="query_property_image_set_with_time" translatable="false"><![CDATA["
		update Property set image = ?, image_time = ? where _id = ?
	"]]></string>
	<string name="query_property_image_set" translatable="false"><![CDATA["
		update Property set image = ? where _id = ?
	"]]></string>
	<string name="query_property_image_get" translatable="false"><![CDATA["
		select _id as _id, image as _dataBlob, length(image) as _size, name || '.jpg' as _display_name from Property where _id = ?
	"]]></string>
	<string name="query_property_delete" translatable="false"><![CDATA["
		delete from Property where _id = ?
	"]]></string>

	<!-- Room CRUD -->
	<string name="query_room_create" translatable="false"><![CDATA["
		insert into Room_Rooter(property, type, name, description) values(?, ?, ?, ?)
	"]]></string>
	<string name="query_room_find" translatable="false"><![CDATA["
		select _id from Room where property = ? and name = ?
	"]]></string>
	<string name="query_room_update" translatable="false"><![CDATA["
		update Room set type = ?, name = ?, description = ? where _id = ?
	"]]></string>
	<string name="query_room_image_set_with_time" translatable="false"><![CDATA["
		update Room set image = ?, image_time = ? where _id = ?
	"]]></string>
	<string name="query_room_image_set" translatable="false"><![CDATA["
		update Room set image = ? where _id = ?
	"]]></string>
	<string name="query_room_image_get" translatable="false"><![CDATA["
		select _id as _id, image as _dataBlob, length(image) as _size, name || '.jpg' as _display_name from Room where _id = ?
	"]]></string>
	<string name="query_room_delete" translatable="false"><![CDATA["
		delete from Room where _id = ?
	"]]></string>
	<string name="query_room_move" translatable="false"><![CDATA["
		update Room set property = ? where _id = ?
	"]]></string>

	<!-- Item CRUD -->
	<string name="query_item_create" translatable="false"><![CDATA["
		insert into Item(parent, category, name, description) values(?, ?, ?, ?)
	"]]></string>
	<string name="query_item_find" translatable="false"><![CDATA["
		select _id from Item where parent = ? and name = ?
	"]]></string>
	<string name="query_item_update" translatable="false"><![CDATA["
		update Item set category = ?, name = ?, description = ? where _id = ?
	"]]></string>
	<string name="query_item_image_set_with_time" translatable="false"><![CDATA["
		update Item set image = ?, image_time = ? where _id = ?
	"]]></string>
	<string name="query_item_image_set" translatable="false"><![CDATA["
		update Item set image = ? where _id = ?
	"]]></string>
	<string name="query_item_image_get" translatable="false"><![CDATA["
		select _id as _id, image as _dataBlob, length(image) as _size, name || '.jpg' as _display_name from Item where _id = ?
	"]]></string>
	<string name="query_item_delete" translatable="false"><![CDATA["
		delete from Item where _id = ?
	"]]></string>
	<string name="query_item_move" translatable="false"><![CDATA["
		update Item set parent = ? where _id = ?
	"]]></string>
</resources>
