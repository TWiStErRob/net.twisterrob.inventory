<?xml version="1.0" encoding="utf-8"?>
<resources xmlns:tools="http://schemas.android.com/tools"
           tools:ignore="TypographyDashes">
	<string name="query_properties"><![CDATA["
		select
			p._id,
			p.name,
			p.image,
			pt.image as typeImage,
			(select count(1) from Room where property = p._id) as countChildren
		from Property p
		join PropertyType pt ON p.type = pt._id
		order by p.name
	"]]></string>
	<string name="query_property"><![CDATA["
		select
			p._id,
			p.name,
			p.type,
			p.image,
			pt.image as typeImage,
			(select count(1) from Room where property = p._id) as countChildren,
			(select count(1) from Item where parent in (select root from Room where property = p._id)) as countDirectItems,
			(select count(distinct item) from Item_Path_Node where root in (select root from Room where property = p._id) and root <> node) as countAllItems
		from Property p
		join PropertyType pt ON p.type = pt._id
		where p._id = ?
	"]]></string>
	<string name="query_property_types"><![CDATA["
		select pt._id, pt.name, pt.image as typeImage
		from PropertyType pt
		order by pt.priority
	"]]></string>
	<string name="query_property_types_filtered"><![CDATA["
		select pt._id, pt.name
		from PropertyType
		where pt.name like ? escape '\'
		order by pt.priority
	"]]></string>


	<string name="query_room_types"><![CDATA["
		select rt._id, rt.name, COALESCE(rt.image, rtk.image) as typeImage
		from RoomType rt
		join RoomTypeKind rtk ON rt.kind = rtk._id
		order by rt.priority
	"]]></string>
	<string name="query_rooms"><![CDATA["
		select
			r._id,
			r.root,
			r.name,
			r.image,
			COALESCE(rt.image, rtk.image) as typeImage,
			p._id as property,
			p.name as propertyName,
			(select count(1) from Item where parent = r.root) as countChildren
		from Room r
		join RoomType rt ON r.type = rt._id
		join RoomTypeKind rtk ON rt.kind = rtk._id
		join Property p ON r.property = p._id
		order by r.name
	"]]></string>
	<string name="query_rooms_by_property"><![CDATA["
		select
			r._id,
			r.root,
			r.name,
			r.image,
			COALESCE(rt.image, rtk.image) as typeImage,
			(select count(1) from Item where parent = r.root) as countChildren
		from Room r
		join RoomType rt ON r.type = rt._id
		join RoomTypeKind rtk ON rt.kind = rtk._id
		where r.property = ?
		order by r.name
	"]]></string>
	<string name="query_room"><![CDATA["
		select
			r._id,
			r.name,
			r.type,
			r.root,
			p._id as property,
			p.name as propertyName,
			r.image,
			COALESCE(rt.image, rtk.image) as typeImage,
			(select count(1) from Item where parent = r.root) as countDirectItems,
			(select count(distinct item) from Item_Path_Node where root = r.root and root <> node) as countAllItems
		from Room r
		join RoomType rt ON r.type = rt._id
		join RoomTypeKind rtk ON rt.kind = rtk._id
		join Property p ON r.property = p._id
		where r._id = ?
	"]]></string>


	<string name="query_item_categories"><![CDATA["
		select
			c._id,
			c.name,
			c.parent,
			cd.level,
			c.image as typeImage
		from Category_Descendant cd
		join Category c ON cd.descendant = c._id and c._id >= 0
		where cd.category = ?
	"]]></string>
	<string name="query_items"><![CDATA["
		select
			i._id,
			i.name,
			i.image,
			c.image as typeImage,
			(select count(1) from Item where parent = i._id) as countChildren,
			c.name as category
		from Item     i
		join Category c ON i.category = c._id
		where i.parent = ?
		order by i.name
	"]]></string>
	<string name="query_item"><![CDATA["
		select
			i._id as _id,
			i.name as name,
			i.image as image,
			c.image as typeImage,
			ip.categoryID as category,
			ip.categoryName as categoryName,
			ip.propertyID as propertyID,
			ip.propertyName as propertyName,
			ip.rootItemID as roomItemID,
			ip.roomID as roomID,
			ip.roomName as roomName,
			i.parent as parent,
			ip.reversePath as parentName,
			(select count(1) from Item where parent = i._id) as countDirectItems,
			(select count(distinct item) from Item_Path_Node where node = i._id and item <> node) as countAllItems
		from Item i
		join Category c ON i.category = c._id
		join Item_Path ip ON i._id = ip.itemID
		where i._id = ?
	"]]></string>
	<string name="query_items_in_room"><![CDATA["
		select
			i._id,
			i.name,
			i.image,
			c.image as typeImage,
			(select count(1) from Item where parent = i._id) as countChildren,
			c.name as category
		from Room     r
		join Item     i ON r.root = i.parent
		join Category c ON i.category = c._id
		where r._id = ?
		order by i.name
	"]]></string>
	<string name="query_items_by_category"><![CDATA["
		select
			i._id,
			i.name,
			i.image,
			c.image as typeImage,
			(select count(1) from Item where parent = i._id) as countChildren,
			c.name as category
		from Item     i
		join Category c ON i.category = c._id
		where i.category = ?
		order by i.name
	"]]></string>
	<string name="query_items_in_category"><![CDATA["
		select
			i._id,
			i.name,
			i.image,
			c.image as typeImage,
			(select count(1) from Item where parent = i._id) as countChildren,
			c.name as category
		from Item     i
		join Category_Descendant cd ON i.category = cd.descendant
		join Category c ON cd.descendant = c._id and c._id <> -1
		where cd.category = ?
		order by i.name
	"]]></string>
	<string name="query_item_parents"><![CDATA["
		select * from (
			-- Item from tree
			select n.item,
					n.level + 2 as level,
					'item' as parentType,
					i._id as _id,
					i.name as name,
					c._id as typeID,
					c.name as typeName,
					c.image as typeImage,
					i.image
				from Item_Path_Node n
				join Item i on i._id = n.node
				join Category c on i.category = c._id
				where n.root <> n.node
			union all
			-- Item (ROOT)
			/*select n.item,
					2 as level,
					'root' as parentType,
					i._id as _id,
					i.name as name,
					c._id as typeID,
					c.name as typeName,
					c.image as typeImage,
					i.image
				from Item_Path_Node n
				join Item i on i._id = n.node
				join Category c on i.category = c._id
				where n.root = n.node
			union all*/
			-- Room
			select n.item,
					2 as level,
					'room' as parentType,
					r._id as _id,
					r.name as name,
					rt._id as typeID,
					rt.name as typeName,
					COALESCE(rt.image, rtk.image) as typeImage,
					r.image
				from Item_Path_Node n
				join Room r on n.root = r.root
				join RoomType rt ON r.type = rt._id
				join RoomTypeKind rtk ON rt.kind = rtk._id
				where n.root = n.node
			union all
			-- Property
			select n.item,
					1 as level,
					'property' as parentType,
					p._id as _id,
					p.name as name,
					pt._id as typeID,
					pt.name as typeName,
					pt.image as typeImage,
					p.image
				from Item_Path_Node n
				join Room r on n.root = r.root
				join Property p on r.property = p._id
				join PropertyType pt ON p.type = pt._id
				where n.root = n.node
			)
			where item = ?
			order by level asc
	"]]></string>


	<string name="query_categories"><![CDATA["
		select
			c._id,
			c.name,
			c.image as typeImage,
			(select count(1) from Category where parent = c._id) as countChildren,
			(select count(1) from Item where category in (select descendant from Category_Descendant where category = c._id)) as countAllItems
		from Category c
		left join Category_Name_Cache cnc ON cnc.key = c.name
		where c.parent = ?
		order by (CASE WHEN c.name <> 'category_uncategorized' THEN ifNULL(cnc.value, c.name) ELSE CAST(X'FFFD' AS TEXT) END)
	"]]></string>
	<string name="query_category"><![CDATA["
		select
			c._id,
			c.name,
			c.image as typeImage,
			ifNULL(ppnc.value || ' > ', '') || pnc.value as parentName,
			(select count(1) from Category where parent = c._id) as countChildren,
			(select count(1) from Category_Descendant where category = c._id and category <> descendant) as countAllChildren,
			(select count(1) from Item where category = c._id) as countDirectItems,
			(select count(1) from Item where category in (select descendant from Category_Descendant where category = c._id)) as countAllItems
		from Category c
		left join Category p ON c.parent = p._id and p._id <> -1
		left join Category_Name_Cache pnc ON p.name = pnc.key
		left join Category pp ON p.parent = pp._id and pp._id <> -1
		left join Category_Name_Cache ppnc ON pp.name = ppnc.key
		where c._id = ?
	"]]></string>


	<string name="query_search_suggest"><![CDATA["
		select
			rowid    as _id,                    -- BaseColumns._ID (for ListView)
			_id      as suggest_intent_data_id, -- SearchManager.SUGGEST_COLUMN_INTENT_DATA_ID
			name     as suggest_text_1,         -- SearchManager.SUGGEST_COLUMN_TEXT_1
			location as suggest_text_2          -- SearchManager.SUGGEST_COLUMN_TEXT_2
		from Search
		where name MATCH ?
		order by name
	"]]></string>
	<string name="query_search"><![CDATA["
		select
			i._id,
			i.name,
			i.image,
			c.image as typeImage,
			(select count(1) from Item where parent = i._id) as countChildren,
			c.name as category
		from Item     i
		join Category c ON i.category = c._id
		join Search s ON i._id = s._id
		where s.name MATCH ?
		order by i.name
	"]]></string>
	<string name="query_export"><![CDATA["
			select
				pt.name  as type,
				p.name   as property,
				null     as room,
				null     as item,
				p.image  as image,
				null     as parent,
				null     as id
			from Property p
			join PropertyType pt ON p.type = pt._id
		UNION ALL
			select
				rt.name  as type,
				p.name   as property,
				r.name   as room,
				null     as item,
				r.image  as image,
				null     as parent,
				null     as id
			from Room r
			join RoomType rt ON r.type = rt._id
			join Property p ON r.property = p._id
		UNION ALL
			select
				c.name   as type,
				p.name   as property,
				r.name   as room,
				i.name   as item,
				i.image  as image,
				CASE
					WHEN i.parent <> r.root
					THEN i.parent
					ELSE NULL
				END      as parent,
				i._id    as id
			from Item           i
			join Category       c  ON i.category = c._id and c._id <> -1
			join Item_Path_Node ip ON ip.item = i._id and ip.node = i._id
			join Room           r  ON ip.root = r.root
			join Property       p  ON r.property = p._id
	"]]></string>


	<string name="query_category_cache_names"><![CDATA["
		select key from Category_Name_Cache
	"]]></string>
	<string name="query_category_cache_update"><![CDATA["
		update Category_Name_Cache set value = ? where key = ?
	"]]></string>


	<!-- Property CRUD -->
	<string name="query_property_create"><![CDATA["
		insert into Property(name, type, image) values(?, ?, ?)
	"]]></string>
	<string name="query_property_find"><![CDATA["
		select _id from Property where name = ?
	"]]></string>
	<string name="query_property_update"><![CDATA["
		update Property set name = ?, type = ?, image = ? where _id = ?
	"]]></string>
	<string name="query_property_delete"><![CDATA["
		delete from Property where _id = ?
	"]]></string>

	<!-- Room CRUD -->
	<string name="query_room_create"><![CDATA["
		insert into Room_Rooter(property, name, type, image) values(?, ?, ?, ?)
	"]]></string>
	<string name="query_room_find"><![CDATA["
		select _id from Room where property = ? and name = ?
	"]]></string>
	<string name="query_room_update"><![CDATA["
		update Room set name = ?, type = ?, image = ? where _id = ?
	"]]></string>
	<string name="query_room_delete"><![CDATA["
		delete from Room where _id = ?
	"]]></string>
	<string name="query_room_move"><![CDATA["
		update Room set property = ? where _id = ?
	"]]></string>

	<!-- Item CRUD -->
	<string name="query_item_create"><![CDATA["
		insert into Item(parent, name, category, image) values(?, ?, ?, ?)
	"]]></string>
	<string name="query_item_find"><![CDATA["
		select _id from Item where parent = ? and name = ?
	"]]></string>
	<string name="query_item_update"><![CDATA["
		update Item set name = ?, category = ?, image = ? where _id = ?
	"]]></string>
	<string name="query_item_delete"><![CDATA["
		delete from Item where _id = ?
	"]]></string>
	<string name="query_item_move"><![CDATA["
		update Item set parent = ? where _id = ?
	"]]></string>

</resources>
